name: Publish Client

on:
  push:
    branches:
      - main
      - pypi_publish
    # paths:
    #   - "karya/**"
    #   - pyproject.toml

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check_version.outputs.should_publish }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          pip install toml

      - name: Fetch version
        id: version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "::set-output name=version::v$VERSION"

      - name: Check if fetch version is greater than github release version
        id: check_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')

          if [ -z "$LATEST_RELEASE" ]; then
            echo "No previous release found. Proceeding with release."
            echo "::set-output name=should_publish::true"
            exit 0
          fi

          CURRENT_VERSION="${{ steps.version.outputs.version }}"

          echo "Current version: $CURRENT_VERSION"
          echo "Latest release: $LATEST_RELEASE"

          if [ "$(printf '%s\n' "$LATEST_RELEASE" "$CURRENT_VERSION" | sort -V | tail -n 1)" != "$LATEST_RELEASE" ]; then
            echo "New version detected. Proceeding with release."
            echo "::set-output name=should_publish::true"
          else
            echo "No new version to release"
            echo "::set-output name=should_publish::false"
          fi
          exit 0

  publish_client:
    needs: check_version
    if: needs.check_version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install project dependencies
        run: |
          poetry install --no-root

      - name: Build the package
        run: |
          poetry build

      - name: Create and publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check_version.outputs.version }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry publish
