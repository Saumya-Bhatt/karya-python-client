name: Publish Client

on:
  push:
    branches:
      - main
      - client_publish_update
    # paths:
    #   - 'karya/**'
    #   - pyproject.toml

jobs:

  publish-release-to-github:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        pip install toml

    - name: Check if fetch version is greater than github release version
      id: check_version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch the latest release tag from GitHub
        LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
        
        # If no previous release exists, continue
        if [ -z "$LATEST_RELEASE" ]; then
          echo "No previous release found. Proceeding with release."
          exit 0
        fi

        # Compare versions (removing 'v' prefix)
        CURRENT_VERSION="${{ steps.version.outputs.version }}"
        
        echo "Current version: $CURRENT_VERSION"
        echo "Latest release: $LATEST_RELEASE"

        # Use sort to compare version strings
        if [ "$(printf '%s\n' "$LATEST_RELEASE" "$CURRENT_VERSION" | sort -V | tail -n 1)" != "$LATEST_RELEASE" ]; then
          echo "New version detected. Proceeding with release."
          exit 0
        else
          echo "No new version to release"
          exit 1
        fi

    - name: Install project dependencies
      run: |
        poetry install --no-root

    - name: Build the package
      run: |
        poetry build

    - name: Fetch version
      id: version
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
        echo "::set-output name=version::v$VERSION"

    - name: Create an publish new release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        files: |
          dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
